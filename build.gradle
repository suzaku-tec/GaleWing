plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.github.node-gradle.node" version "3.1.0"
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

// tag::jar[]
jar {
    archiveBaseName = 'GaleWings'
    archiveVersion = '0.1.0'
}
// end::jar[]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.6.6'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.6'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.6'

    implementation 'com.miragesql:miragesql:2.1.0'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.1'

    // https://mvnrepository.com/artifact/be.ceau/opml-parser
    implementation 'be.ceau:opml-parser:2.2.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'

    // https://mvnrepository.com/artifact/org.springframework/spring-jdbc
    implementation 'org.springframework:spring-jdbc:5.3.9'

    implementation 'com.miragesql:miragesql-integration:2.1.0'

    // https://mvnrepository.com/artifact/com.rometools/rome
    implementation 'com.rometools:rome:1.16.0'

    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl
    implementation 'org.codehaus.jackson:jackson-core-asl:1.9.13'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation "com.github.node-gradle:gradle-node-plugin:3.1.0"

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    implementation 'org.jsoup:jsoup:1.14.2'

    // https://mvnrepository.com/artifact/commons-validator/commons-validator
    implementation 'commons-validator:commons-validator:1.7'

    // https://mvnrepository.com/artifact/com.atilika.kuromoji/kuromoji-ipadic
    implementation 'com.atilika.kuromoji:kuromoji-ipadic:0.9.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testImplementation 'ch.qos.logback:logback-classic:1.2.6'
}

sonarqube {
    properties {
        property "sonar.projectKey", "suzaku-tec_GaleWing"
        property "sonar.organization", "suzaku-tec"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.exclusions", "src/main/java/com/galewings/entity/**, src/main/java/com/galewings/exception/**, src/main/java/com/galewings/dto/**, src/test/java/**/*Test.java, src/main/java/com/galewings/controller/SiteFeedController.java, src/main/java/com/galewings/task/AutoUpdateTask.java, src/main/javascript/src/index.ts"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

test {
    useJUnitPlatform()
}

task npmRun(type: NpmTask) {
    npmCommand = ['run', 'deploy']
    execOverrides {
        // The it variable contains the `ExecSpec`
        it.ignoreExitValue = true
        // We can also omit it since "it" is implicit
        workingDir = file('src/main/javascript')
    }
}

apply plugin: 'com.github.node-gradle.node'
processResources.dependsOn npmRun

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

